class Node {
    constructor(val = null) {
        this.val = val;
        this.left = null;
        this.right = null;
    }
}

const createTree = (array, index = 0) => {
    const node = new Node(array[index]);
    if(index < array.length) {
        node.left = createTree(array, 2*index+1);
        node.right = createTree(array, 2*index+2);
    }
    return node;
}


const horizontalDistance = (head) => {
    const queue = [[head, 0]];
    const hashMap = new Map();
    
    while (queue.length !== 0) {
        const nodeData = queue.shift();
        const node = nodeData[0];
        const nodeHd = nodeData[1];
        
        if (node.val !== null) {
            if (!hashMap.has(nodeHd)) {
                hashMap.set(nodeHd, [node.val]);
            } else {
               let val = hashMap.get(nodeHd)
               val.push(node.val);
               hashMap.set(nodeHd, val)
            }
        }
        
        if(node.left) {
            queue.push([node.left, nodeHd - 1]);
        }
        
        if(node.right) {
            queue.push([node.right, nodeHd + 1]);
        }
    }
    
    return hashMap;
}

const bottomView = (hdMap) => {
    const sorted = new Map([...hdMap.entries()].sort());
    const bottom = [];
    sorted.forEach((val) => bottom.push(val[val.length-1]));
    return bottom;
}

const main = () => {
    const head = createTree([0,1,2,3,4,5,6]);
    const hd = horizontalDistance(head);
    const bottom = bottomView(hd);
    console.log(bottom)
}

main();




